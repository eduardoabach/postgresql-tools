<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<title>Menu</title>
		<style>
			html, body {
				height: 100%;
			}

			body {
				background-color: #191919;
				margin: 0;
				font-family: Arial;
				overflow: hidden;
			}

			a {
				color: #ffffff;
			}

			#info {
				position: absolute;
				width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family: Monospace;
				font-size: 13px;
				font-weight: bold;
				text-align: center;
				z-index: 1;
			}

			#menu {
				position: absolute;
				bottom: 20px;
				width: 100%;
				text-align: center;
			}

			.element {
				width: 700px;
				height: 180px;
				box-shadow: 0px 0px 20px rgba(255,0,0,0.5);
				border: 1px solid rgba(255,127,127,0.25);
				cursor: default;
			}

			.element:hover {
				box-shadow: 0px 0px 20px rgba(255,255,255,0.75);
				border: 1px solid rgba(255,127,127,0.75);
			}

				.element .number {
					position: absolute;
					top: 20px;
					right: 20px;
					font-size: 20px;
					color: rgba(255,127,127,0.75);
				}

				.element .symbol {
					position: absolute;
					top: 40px;
					width: 100%;
					font-size: 70px;
					text-align: center;
					color: rgba(255,255,255,0.75);
					font-weight: bold;

					-webkit-filter: drop-shadow(0px 0px 20px rgba(255,0,0,0.95));
					-moz-filter: drop-shadow(0px 0px 20px rgba(255,0,0,0.95));
					-o-filter: drop-shadow(0px 0px 20px rgba(255,0,0,0.95));
					-ms-filter: drop-shadow(0px 0px 20px rgba(255,0,0,0.95));
					filter: drop-shadow(0px 0px 20px rgba(255,0,0,0.95));
				}

				.element .details {
					position: absolute;
					top: 125px;
					width: 100%;
					font-size: 18px;
					text-align: center;
					color: rgba(255,127,127,0.75);
				}

			button {
				color: rgba(255,127,127,0.75);
				background: transparent;
				outline: 1px solid rgba(255,127,127,0.75);
				border: 0px;
				padding: 5px 10px;
				cursor: pointer;
			}
			button:hover {
				background-color: rgba(255,0,0,0.5);
			}
			button:active {
				color: #000000;
				background-color: rgba(255,0,0,0.75);
			}
		</style>
	</head>
	<body>
		<script src="three.min.js"></script>
		<script src="tween.min.js"></script>
		<script src="TrackballControls.js"></script>
		<script src="CSS3DRenderer.js"></script>

		<div id="menuMovel"></div>
		<div id="menu">
			<!--<button id="table">TABLE</button>-->

		<script>

			var menuInteract = [
				[ "Conversar", "conversar"],
				[ "Comportamento", "comport"],
				[ "Ensinar Palavras", "ensi_palavras"],
				[ "Ensinar Frases", "ensi_frases"]
			];

			var camera, scene, renderer;
			var controls;

			var objetosList = [];
         var objetoMenu = { estrutura: []};

			initMenu();
			animate();

			function initMenu() {

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 5000 );
				camera.position.z = 1800;
				scene = new THREE.Scene();
            var tipoExibir = 'plano_reto';

				for ( var i = 0; i < menuInteract.length; i ++ ) {
					var item = menuInteract[ i ];

					var element = document.createElement( 'div' );
					element.className = 'element';
					element.style.backgroundColor = 'rgba(127,0,0,' + ( Math.random() * 0.5 + 0.25 ) + ')';

					var symbol = document.createElement( 'div' );
					symbol.className = 'symbol';
					symbol.textContent = item[0];
               symbol.setAttribute("id", item[1]);
               symbol.setAttribute("onclick", "alert('a');");
					element.appendChild( symbol );

					var object = new THREE.CSS3DObject( element );
					object.position.x = Math.random() * 4000 - 2000;
					object.position.y = Math.random() * 4000 - 2000;
					object.position.z = Math.random() * 4000 - 2000;
					scene.add( object );

					objetosList.push( object );
				}

            if(tipoExibir == 'plano_reto'){

               var positAt = 180;
               for ( var i = 0; i < objetosList.length; i ++ ) {
                  var object = new THREE.Object3D();
                  positAt = positAt*-1;
                  object.position.x = ( i * 700 )-1200;
                  object.position.y = positAt;
                  object.position.z = positAt;
                  objetoMenu.estrutura.push( object );
               }

            } else if(tipoExibir == 'circulo'){

               var vector = new THREE.Vector3();
               for ( var i = 0, l = objetosList.length; i < l; i ++ ) {
                  var phi = i + Math.PI;
                  var object = new THREE.Object3D();

                  object.position.x = 650 * Math.sin( phi );
                  object.position.y = 0;
                  object.position.z = 650 * Math.cos( phi );

                  vector.copy( object.position );
                  vector.x *= 2;
                  vector.z *= 2;

                  object.lookAt( vector );
                  objetoMenu.estrutura.push( object );
               }

            }



          // sphere
//				var vector = new THREE.Vector3();
//				for ( var i = 0, l = objetosList.length; i < l; i ++ ) {
//					var phi = Math.acos( -1 + ( 2 * i ) / l );
//					var theta = Math.sqrt( l * Math.PI ) * phi;
//					var object = new THREE.Object3D();
//
//					object.position.x = 1000 * Math.cos( theta ) * Math.sin( phi );
//					object.position.y = 1000 * Math.sin( theta ) * Math.sin( phi );
//					object.position.z = 1000 * Math.cos( phi );
//
//					vector.copy( object.position ).multiplyScalar( 2 );
//					object.lookAt( vector );
//					objetoMenu.sphere.push( object );
//				}
//
//				// helix
//				var vector = new THREE.Vector3();
//				for ( var i = 0, l = objects.length; i < l; i ++ ) {
//					var phi = i * 0.175 + Math.PI;
//					var object = new THREE.Object3D();
//
//					object.position.x = 1100 * Math.sin( phi );
//					object.position.y = - ( i * 8 ) + 450;
//					object.position.z = 1100 * Math.cos( phi );
//
//					vector.copy( object.position );
//					vector.x *= 2;
//					vector.z *= 2;
//
//					object.lookAt( vector );
//					targets.helix.push( object );
//				}
//
//				// grid
//				for ( var i = 0; i < objects.length; i ++ ) {
//					var object = new THREE.Object3D();
//
//					object.position.x = ( ( i % 5 ) * 400 ) - 800;
//					object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800;
//					object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000;
//					targets.grid.push( object );
//				}

				//

				renderer = new THREE.CSS3DRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.domElement.style.position = 'absolute';
				document.getElementById( 'menuMovel' ).appendChild( renderer.domElement );

				//

				controls = new THREE.TrackballControls( camera, renderer.domElement );
				controls.rotateSpeed = 0.5;
				controls.addEventListener( 'change', render );

//            var button = document.getElementById('conversar');
//				button.addEventListener( 'click', function ( event ) {
//               alert('x');
//					//transform( targets.table, 2000 );
//				}, false );


				transformMenu( objetoMenu.estrutura, 2000 );

				//

				window.addEventListener( 'resize', onWindowResize, false );
			}

			function transformMenu( targets, duration ) {
				TWEEN.removeAll();
				for ( var i = 0; i < objetosList.length; i ++ ) {
					var object = objetosList[ i ];
					var target = targets[ i ];

					new TWEEN.Tween( object.position )
						.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();

					new TWEEN.Tween( object.rotation )
						.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();
				}

				new TWEEN.Tween( this )
					.to( {}, duration * 2 )
					.onUpdate( render )
					.start();
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			function animate() {
				requestAnimationFrame( animate );
				TWEEN.update();
				controls.update();
			}

			function render() {
				renderer.render( scene, camera );
			}

		</script>
   </div>
   </body>
</html>